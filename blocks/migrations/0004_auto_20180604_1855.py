# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-06-04 18:55
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('blocks', '0003_carousel_slide'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('block_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blocks.Block')),
                ('style', models.CharField(choices=[('primary', 'Primary'), ('secondary', 'Secondary'), ('success', 'Success'), ('danger', 'Danger'), ('warning', 'Warning'), ('info', 'Info'), ('light', 'Light'), ('dark', 'Dark')], help_text=' For proper styling, use one of the eight required contextual classes, \n            <a href="https://getbootstrap.com/docs/4.1/components/alerts/#examples">\n            view this examples to get the idea</a>.', max_length=50, verbose_name='Style')),
                ('has_dismiss_button', models.BooleanField(default=True, help_text=" Remember to use dismiss alerts only once, in other words\n            don't edit the content to reuse the block again. Once published, create another one.\n            ", verbose_name='Has dismiss button')),
                ('content', models.TextField(blank=True, help_text=' Use the <b>.alert-link</b> utility class to quickly provide matching colored links within any alert, \n            <a href="https://getbootstrap.com/docs/4.1/components/alerts/#link-color">view this examples \n            to get the idea</a>. Also you can use <b>.alert-heading</b> for force elements to inherit text color.\n            ', null=True, verbose_name='Content')),
            ],
            options={
                'verbose_name': 'Alert Block',
                'verbose_name_plural': 'Alert Blocks',
                'manager_inheritance_from_future': True,
            },
            bases=('blocks.block',),
        ),
        migrations.AlterField(
            model_name='block',
            name='status',
            field=models.IntegerField(choices=[(1, 'Unpublished'), (2, 'Published')], db_index=True, default=1, help_text='Only admins can see unpublished items.', verbose_name='Status'),
        ),
        migrations.AlterField(
            model_name='block',
            name='wrapper_css_class',
            field=models.CharField(blank=True, db_index=True, help_text=' You can use the <b>invisible</b> class to hide the element and later remove \n            the invisible class with some conditions using js. \n            ', max_length=255, null=True, verbose_name='Wrapper css class'),
        ),
    ]
